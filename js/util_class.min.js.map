{"version":3,"file":"util_class.min.js","sources":["util_class.js"],"sourcesContent":["/**\r\n * Classe para utilidades diversas.\r\n */\r\nclass Utils {\r\n    /**\r\n     * Retorna o valor de um parâmetro específico na URL.\r\n     * @param {string} paramName Nome do parâmetro.\r\n     * @returns {string|boolean} Valor do parâmetro ou false se não encontrado.\r\n     */\r\n    static getURLParameter(paramName) {\r\n        return new URLSearchParams(window.location.search).get(paramName) || false;\r\n    }\r\n\r\n    /**\r\n     * Retorna todos os parâmetros da URL como um objeto.\r\n     * @returns {object} Objeto com os parâmetros.\r\n     */\r\n    static getAllURLParameters() {\r\n        return Object.fromEntries(new URLSearchParams(window.location.search));\r\n    }\r\n\r\n    /**\r\n     * Converte uma string de parâmetros em um objeto associativo.\r\n     * @param {string} paramString String de parâmetros.\r\n     * @returns {object} Objeto associativo.\r\n     */\r\n    static convertParamsToObject(paramString) {\r\n        return paramString.split('&').reduce((acc, pair) => {\r\n            const [key, value] = pair.split('=');\r\n            acc[key] = decodeURIComponent(value);\r\n            return acc;\r\n        }, {});\r\n    }\r\n\r\n    /**\r\n     * Converte uma string de cookies em um objeto associativo.\r\n     * @param {string} cookieString String de cookies.\r\n     * @returns {object} Objeto associativo.\r\n     */\r\n    static convertCookiesToObject(cookieString) {\r\n        return cookieString.split(';').reduce((acc, pair) => {\r\n            const [key, value] = pair.split('=');\r\n            acc[key.trim()] = decodeURI(value);\r\n            return acc;\r\n        }, {});\r\n    }\r\n\r\n    /**\r\n     * Retorna os cookies da página como um objeto.\r\n     * @returns {object} Objeto com os cookies.\r\n     */\r\n    static getAllCookies() {\r\n        const cookieString = document.cookie;\r\n        return cookieString ? this.convertCookiesToObject(cookieString) : {};\r\n    }\r\n\r\n    /**\r\n     * Converte a primeira letra de cada palavra para maiúscula.\r\n     * @param {string} str String para converter.\r\n     * @returns {string} String convertida.\r\n     */\r\n    static capitalizeWords(str) {\r\n        return str.toLowerCase().split(' ')\r\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n            .join(' ');\r\n    }\r\n\r\n    /**\r\n     * Gera um ID único.\r\n     * @param {number} length Comprimento do ID.\r\n     * @returns {number} ID único.\r\n     */\r\n    static generateUniqueId(length = 16) {\r\n        return parseInt(\r\n            Math.ceil(Math.random() * Date.now())\r\n                .toPrecision(length)\r\n                .toString()\r\n                .replace('.', '')\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Adiciona máscara a um elemento de entrada de texto.\r\n     * @param {HTMLInputElement} input Elemento de entrada de texto.\r\n     * @param {string[]} masks Lista de máscaras.\r\n     */\r\n    static maskInput(input, masks = ['(00) 0000-0000', '(00) 00000-0000']) {\r\n        // Obtém o tamanho máximo da máscara\r\n        const maxMaskSize = Math.max(...masks.map(mask => mask.replace(/\\D/g, '').length));\r\n\r\n        // Adiciona um evento 'input' para lidar com a formatação\r\n        input.addEventListener('input', function (event) {\r\n            // Remove caracteres não numéricos\r\n            let numericValue = this.value.replace(/\\D/g, '');\r\n\r\n            // Trunca o valor para o tamanho máximo permitido pela máscara\r\n            numericValue = numericValue.substring(0, maxMaskSize);\r\n\r\n            // Escolhe a máscara apropriada com base no tamanho do valor\r\n            const chosenMask = masks.find(mask => mask.replace(/\\D/g, '').length >= numericValue.length) || masks[masks.length - 1];\r\n\r\n            // Aplica a máscara ao valor\r\n            let maskedValue = '';\r\n            let index = 0;\r\n            for (const char of chosenMask) {\r\n                if (index >= numericValue.length) break;\r\n                maskedValue += /\\D/.test(char) ? char : numericValue[index++];\r\n            }\r\n\r\n            // Atualiza o valor do elemento de entrada\r\n            this.value = maskedValue;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Embaralha um array de forma aleatória.\r\n     * @param {Array} arr - O array a ser embaralhado.\r\n     * @returns {Array} O array embaralhado.\r\n     */\r\n    static shuffleArray(arr) {\r\n        for (let i = arr.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [arr[i], arr[j]] = [arr[j], arr[i]];\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    /**\r\n     * Remove elementos duplicados de um array.\r\n     * @param {Array} arr - O array original.\r\n     * @returns {Array} Um novo array sem duplicatas.\r\n     */\r\n    static unique(arr) {\r\n        return [...new Set(arr)];\r\n    }\r\n\r\n    /**\r\n     * Encurta uma string para um determinado comprimento.\r\n     * @param {string} str - A string original.\r\n     * @param {number} length - O comprimento máximo da string.\r\n     * @returns {string} A string encurtada.\r\n     */\r\n    static truncateString(str, length) {\r\n        return str.length > length ? str.substring(0, length - 3) + '...' : str;\r\n    }\r\n\r\n    /**\r\n     * Escapa caracteres especiais para uso em HTML.\r\n     * @param {string} str - A string a ser escapada.\r\n     * @returns {string} A string escapada.\r\n     */\r\n    static escapeHTML(str) {\r\n        const div = document.createElement('div');\r\n        div.appendChild(document.createTextNode(str));\r\n        return div.innerHTML;\r\n    }\r\n\r\n    /**\r\n     * Clona um objeto profundamente.\r\n     * @param {Object} obj - O objeto a ser clonado.\r\n     * @returns {Object} Uma cópia profunda do objeto.\r\n     */\r\n    static deepClone(obj) {\r\n        if (obj === null || typeof obj !== 'object') {\r\n            return obj;\r\n        }\r\n        if (Array.isArray(obj)) {\r\n            return obj.map(value => this.deepClone(value));\r\n        }\r\n        const cloneObj = {};\r\n        for (const [key, value] of Object.entries(obj)) {\r\n            cloneObj[key] = this.deepClone(value);\r\n        }\r\n        return cloneObj;\r\n    }\r\n\r\n    /**\r\n     * Mescla dois ou mais objetos.\r\n     * @param {...Object} objs - Os objetos a serem mesclados.\r\n     * @returns {Object} Um novo objeto contendo todas as propriedades dos objetos originais.\r\n     */\r\n    static mergeObjects(...objs) {\r\n        const result = {};\r\n        for (const obj of objs) {\r\n            for (const [key, value] of Object.entries(obj)) {\r\n                if (value && typeof value === 'object' && !Array.isArray(value)) {\r\n                    result[key] = this.mergeObjects(result[key], value);\r\n                } else {\r\n                    result[key] = value;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Verifica se um objeto está vazio.\r\n     * @param {Object} obj - O objeto a ser verificado.\r\n     * @returns {boolean} Verdadeiro se o objeto estiver vazio, falso caso contrário.\r\n     */\r\n    static isEmptyObject(obj) {\r\n        return Object.keys(obj).length === 0;\r\n    }\r\n\r\n    /**\r\n     * Retorna um elemento DOM com base em um seletor, mas inclui verificação de erro.\r\n     * @param {string} selector - O seletor do elemento DOM.\r\n     * @returns {Element|null} O elemento DOM ou null se não encontrado.\r\n     */\r\n    static getElement(selector) {\r\n        const element = document.querySelector(selector);\r\n        if (!element) {\r\n            console.warn(`Element not found for selector: ${selector}`);\r\n            return null;\r\n        }\r\n        return element;\r\n    }\r\n\r\n    /**\r\n     * Alterna a visibilidade de um elemento DOM.\r\n     * @param {Element|string} element - O elemento DOM ou o seletor do elemento.\r\n     */\r\n    static toggleVisibility(element) {\r\n        if (typeof element === 'string') {\r\n            element = this.getElement(element);\r\n        }\r\n        if (!element) {\r\n            return;\r\n        }\r\n        const currentStyle = window.getComputedStyle(element).display;\r\n        element.style.display = (currentStyle === 'none' || currentStyle === '') ? 'block' : 'none';\r\n    }\r\n}\r\n\r\n\r\n// Classe para requisições de rede\r\nclass Network {\r\n    constructor() { }\r\n\r\n    /**\r\n     * Método auxiliar privado para fazer uma requisição de rede.\r\n     * @private\r\n     * @param {string} URL - A URL que será consultada.\r\n     * @param {Object|FormData} data - Os dados da requisição.\r\n     * @param {Object} [headers={}] - Headers adicionais para a requisição.\r\n     * @returns {Promise} Uma promessa com o resultado da consulta.\r\n     */\r\n    static async _fetch(URL, data, headers = {}) {\r\n        try {\r\n            const response = await fetch(URL, {\r\n                method: \"POST\",\r\n                body: data,\r\n                headers,\r\n            });\r\n            return response.json();\r\n        } catch (error) {\r\n            console.error(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Consulta a URL informada com o método POST.\r\n     * @param {Object} param - Um objeto com as propriedades URL e Data.\r\n     * @param {string} param.URL - A URL que será consultada.\r\n     * @param {Object} param.Data - Um objeto contendo os dados da requisição.\r\n     * @returns {Promise} Uma promessa com o resultado da consulta.\r\n     */\r\n    async Consult({ URL, Data }) {\r\n        return Network._fetch(URL, new URLSearchParams(Data).toString(), {\r\n            \"Content-type\": \"application/x-www-form-urlencoded\",\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Insere dados na URL informada com o método POST.\r\n     * @param {string} URL - A URL que receberá os dados.\r\n     * @param {FormData} Data - Um objeto FormData contendo os dados a serem inseridos.\r\n     * @returns {Promise} Uma promessa com o resultado da inserção.\r\n     */\r\n    async Insert(URL, Data) {\r\n        return Network._fetch(URL, Data);\r\n    }\r\n\r\n    /**\r\n     * Busca informações adicionais e preenche no objeto Answers.\r\n     * @param {Object} Answers - O objeto onde as respostas serão armazenadas.\r\n     * @param {string} [url=\"https://www.cloudflare.com/cdn-cgi/trace\"] - A URL de onde buscar as informações.\r\n     */\r\n    static async fetchAdditionalInfo(\r\n        Answers,\r\n        url = \"https://www.cloudflare.com/cdn-cgi/trace\"\r\n    ) {\r\n        try {\r\n            const response = await fetch(url);\r\n            let data = await response.text();\r\n\r\n            data = data\r\n                .trim()\r\n                .split(\"\\n\")\r\n                .reduce((obj, pair) => {\r\n                    const [key, value] = pair.split(\"=\");\r\n                    obj[key] = value;\r\n                    return obj;\r\n                }, {});\r\n\r\n            Object.entries(data).forEach(([key, val]) => {\r\n                const formattedKey = key.replaceAll(/-|_/g, \"\");\r\n                const formattedValue = !isNaN(val) ? Number(val) : val;\r\n                Answers[formattedKey] = {\r\n                    text: formattedKey,\r\n                    value: formattedValue,\r\n                };\r\n            });\r\n        } catch (error) {\r\n            console.error(\"An error occurred:\", error);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass CookieAndURLManager {\r\n    /**\r\n     * Preenche o objeto Answers com parâmetros vindos da URL.\r\n     * @param {Object} Answers - Objeto onde as respostas serão armazenadas.\r\n     */\r\n    static fillAnswersFromURLParameters(Answers) {\r\n        const urlParams = Utils.getAllURLParameters();\r\n        this._fillAnswers(Answers, urlParams);\r\n    }\r\n\r\n    /**\r\n     * Preenche o objeto Answers com valores vindos dos cookies.\r\n     * @param {Object} Answers - Objeto onde as respostas serão armazenadas.\r\n     */\r\n    static fillAnswersFromCookies(Answers) {\r\n        const cookies = Utils.getAllCookies();\r\n        this._fillAnswers(Answers, cookies);\r\n    }\r\n\r\n    /**\r\n     * Preenche o objeto Answers com os dados fornecidos.\r\n     * Método auxiliar para evitar duplicação de código.\r\n     * @private\r\n     * @param {Object} Answers - Objeto onde as respostas serão armazenadas.\r\n     * @param {Object} data - Dados para preencher em Answers.\r\n     */\r\n    static _fillAnswers(Answers, data) {\r\n        for (const [key, value] of Object.entries(data)) {\r\n            const formattedKey = key.replaceAll(/-|_/g, \"\");\r\n            Answers[formattedKey] = { text: formattedKey, value: value };\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass EventTracker {\r\n    /**\r\n     * Envia um evento para o Google Tag Manager.\r\n     * @param {string} event - O nome do evento.\r\n     * @param {Object} [data] - Dados adicionais a serem enviados.\r\n     */\r\n    static sendGTMEvent(event, data = {}) {\r\n        if (window.dataLayer) {\r\n            window.dataLayer.push({ event, ...data });\r\n        } else {\r\n            console.warn(\"Google Tag Manager não está inicializado\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Envia um evento padrão para o Facebook Ads.\r\n     * @param {string} event - O nome do evento.\r\n     * @param {Object} [data] - Dados adicionais a serem enviados.\r\n     * @param {Object} [options] - Opções adicionais.\r\n     */\r\n    static sendFBStandardEvent(event, data = {}, options = {}) {\r\n        if (typeof fbq !== \"undefined\") {\r\n            fbq(\"track\", event, data, options);\r\n        } else {\r\n            console.warn(\"Facebook Pixel não está inicializado\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Envia um evento customizado para o Facebook Ads.\r\n     * @param {string} event - O nome do evento.\r\n     * @param {Object} [data] - Dados adicionais a serem enviados.\r\n     * @param {Object} [options] - Opções adicionais.\r\n     */\r\n    static sendFBCustomEvent(event, data = {}, options = {}) {\r\n        if (typeof fbq !== \"undefined\") {\r\n            fbq(\"trackCustom\", event, data, options);\r\n        } else {\r\n            console.warn(\"Facebook Pixel não está inicializado\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Envia um evento para a plataforma especificada.\r\n     * @param {string} platform - A plataforma para enviar o evento (\"GTM\" ou \"FB\").\r\n     * @param {string} type - O tipo de evento (\"standard\" ou \"custom\").\r\n     * @param {string} event - O nome do evento.\r\n     * @param {Object} [data] - Dados adicionais a serem enviados.\r\n     * @param {Object} [options] - Opções adicionais.\r\n     */\r\n    static sendEvent(platform, type, event, data = {}, options = {}) {\r\n        switch (platform) {\r\n            case \"GTM\":\r\n                this.sendGTMEvent(event, data);\r\n                break;\r\n            case \"FB\":\r\n                if (type === \"standard\") {\r\n                    this.sendFBStandardEvent(event, data, options);\r\n                } else if (type === \"custom\") {\r\n                    this.sendFBCustomEvent(event, data, options);\r\n                }\r\n                break;\r\n            default:\r\n                console.warn(\"Plataforma não suportada\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass Logger {\r\n    constructor() {\r\n        // Define os níveis de log disponíveis e sua ordem\r\n        this.levels = new Map([\r\n            ['debug', 1],\r\n            ['info', 2],\r\n            ['warn', 3],\r\n            ['error', 4]\r\n        ]);\r\n        this.minLogLevel = 'debug'; // O nível mínimo de log padrão\r\n    }\r\n\r\n    /**\r\n     * Define o nível mínimo de log.\r\n     * @param {string} level - Nível de log.\r\n     */\r\n    setMinLogLevel(level) {\r\n        if (this.levels.has(level)) {\r\n            this.minLogLevel = level;\r\n        } else {\r\n            console.warn(`Nível de log \"${level}\" não existe. Níveis disponíveis: ${Array.from(this.levels.keys())}`)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Verifica se o log deve ser feito com base no nível mínimo.\r\n     * @param {string} level - Nível de log.\r\n     * @returns {boolean} - Se deve ou não fazer log.\r\n     */\r\n    shouldLog(level) {\r\n        return this.levels.get(level) >= this.levels.get(this.minLogLevel);\r\n    }\r\n\r\n    /**\r\n     * Faz log da mensagem e parâmetros com base no nível fornecido.\r\n     * @param {string} level - Nível de log.\r\n     * @param {string} message - Mensagem para log.\r\n     * @param  {...any} params - Parâmetros adicionais.\r\n     */\r\n    log(level, message, ...params) {\r\n        if (this.shouldLog(level)) {\r\n            console[level](message, ...params);\r\n        }\r\n    }\r\n\r\n    // Atalhos para os diferentes níveis de log\r\n\r\n    debug(message, ...params) {\r\n        this.log('debug', message, ...params);\r\n    }\r\n\r\n    info(message, ...params) {\r\n        this.log('info', message, ...params);\r\n    }\r\n\r\n    warn(message, ...params) {\r\n        this.log('warn', message, ...params);\r\n    }\r\n\r\n    error(message, ...params) {\r\n        this.log('error', message, ...params);\r\n    }\r\n}"],"names":["Utils","getURLParameter","paramName","URLSearchParams","window","location","search","get","getAllURLParameters","Object","fromEntries","convertParamsToObject","paramString","split","reduce","acc","pair","key","value","decodeURIComponent","convertCookiesToObject","cookieString","trim","decodeURI","getAllCookies","document","cookie","this","capitalizeWords","str","toLowerCase","map","word","charAt","toUpperCase","slice","join","generateUniqueId","length","parseInt","Math","ceil","random","Date","now","toPrecision","toString","replace","maskInput","input","masks","maxMaskSize","max","mask","addEventListener","event","let","numericValue","substring","maskedValue","index","char","find","test","shuffleArray","arr","i","j","floor","unique","Set","truncateString","escapeHTML","div","createElement","appendChild","createTextNode","innerHTML","deepClone","obj","Array","isArray","cloneObj","entries","mergeObjects","objs","result","isEmptyObject","keys","getElement","selector","element","querySelector","console","warn","toggleVisibility","currentStyle","getComputedStyle","display","style","Network","constructor","_fetch","URL","data","headers","await","fetch","method","body","json","error","Consult","Data","Content-type","Insert","fetchAdditionalInfo","Answers","url","text","forEach","val","formattedKey","replaceAll","formattedValue","isNaN","Number","CookieAndURLManager","fillAnswersFromURLParameters","urlParams","_fillAnswers","fillAnswersFromCookies","cookies","EventTracker","sendGTMEvent","dataLayer","push","sendFBStandardEvent","options","fbq","sendFBCustomEvent","sendEvent","platform","type","Logger","levels","Map","minLogLevel","setMinLogLevel","level","has","from","shouldLog","log","message","params","debug","info"],"mappings":"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"}